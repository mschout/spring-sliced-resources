import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
  ext {
    springBootVersion = "2.7.4"
    repositoryName = 'spring-sliced-resources'
  }
}

plugins {
  id 'org.springframework.boot' version "$springBootVersion"
  id 'java-library'
  id 'idea'
  id 'maven-publish'
  id 'signing'
  id 'fr.brouillard.oss.gradle.jgitver' version '0.10.0-rc03'
  id 'com.diffplug.spotless' version '6.10.0' // code formatting
}


java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }

  withSourcesJar()
  withJavadocJar()
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  implementation platform(SpringBootPlugin.BOM_COORDINATES)

  compileOnly 'org.springframework.boot:spring-boot-starter-web'
  compileOnly 'org.springframework:spring-context-support'
  compileOnly 'org.springframework.hateoas:spring-hateoas'
  compileOnly 'org.springframework.data:spring-data-commons'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'

  runtimeOnly 'jakarta.servlet:jakarta.servlet-api'
}

configurations {
  // Include compileOnly runtime path for the tests
  testImplementation.extendsFrom compileOnly
}

tasks.named('test') {
  useJUnitPlatform()
}

spotless {
  java {
    eclipse().configFile('etc/eclipse-code-formatter.xml')
  }
}

jgitver {
  autoIncrementPatch false;
  nonQualifierBranches = "main,master"
}

signing {
  useGpgCmd()
  sign publishing.publications
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId    = 'io.github.mschout'
      artifactId = 'spring-sliced-resources'

      from components.java

      pom {
        name = "${groupId}:${artifactId}"
        description = 'Interface to Email Sender Rewriting Scheme for Java'
        url = "https://github.com/mschout/${repositoryName}"
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            name = 'Michael Schout'
            email = 'schoutm@gmail.com'
            organizationUrl = 'https://github.com/mschout'
          }
        }
        scm {
          connection = "scm:git:git://github.com/mschout/${repositoryName}.git"
          developerConnection = "scm:git:ssh://github.com:mschout/${repositoryName}.git"
          url = "https://github.com/mschout/${repositoryName}/tree/master"
        }
      }
    }
  }
}